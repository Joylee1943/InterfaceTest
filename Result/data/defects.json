{
  "defectsList" : [ {
    "title" : "Product defects",
    "status" : "FAILED",
    "defects" : [ {
      "uid" : "6170aea7a0bcf0cb",
      "failure" : {
        "message" : "AssertionError: assert False\n +  where False = compare('{\"errorCode\":\"99999\"}', \"{'code': 0, 'data': {'mobileNumber': '18501604617', 'userId': 33}, 'msg': '成功'}\")",
        "stackTrace" : "self = <test_interface.Testlogin object at 0x000001A6E808E240>\nurl = 'userLoginV3'\nparam = '{\"mobileNumber\":\"13701837591 \",\"password\":\"a123456\"}'\nexpected = \"{'code': 0, 'data': {'mobileNumber': '18501604617', 'userId': 33}, 'msg': '成功'}\"\n\n    @pytest.mark.parametrize(\"url,param,expected\", general_case(\"登录\", product_name))\n    @allure.feature('登录测试')\n    def test_login(self, url, param, expected):\n        newPara = general_arg(constArg, eval(param),product_name)\n        r = sendRequest(newPara, (path + url).strip())\n>       assert compare(r[0], expected)\nE       assert False\nE        +  where False = compare('{\"errorCode\":\"99999\"}', \"{'code': 0, 'data': {'mobileNumber': '18501604617', 'userId': 33}, 'msg': '成功'}\")\n\ntest_interface.py:40: AssertionError"
      },
      "testCases" : [ {
        "uid" : "4ce27d4840bc5826",
        "name" : "Testlogin.test_login[userLoginV3-{\"mobileNumber\":\"13701837591 \",\"password\":\"a123456\"}-{'code': 0, 'data': {'mobileNumber': '18501604617', 'userId': 33}, 'msg': '\\u6210\\u529f'}]",
        "title" : "Test login [userLoginV3-{\"mobileNumber\":\"13701837591 \",\"password\":\"a123456\"}-{'code': 0, 'data': {'mobileNumber': '18501604617', 'userId': 33}, 'msg': '\\u6210\\u529f'}]",
        "time" : {
          "start" : 1502964684569,
          "stop" : 1502964684946,
          "duration" : 377
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    } ]
  }, {
    "title" : "Test defects",
    "status" : "BROKEN",
    "defects" : [ ]
  } ]
}